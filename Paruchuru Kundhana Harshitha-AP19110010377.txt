QUESTION-1
#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node* left;
    struct node* right;
};
void inorder(struct node*root){
    if(root==NULL)return;
    inorder(root->left);
    printf("%d-",root->data);
    inorder(root->right);
}
void preorder(struct node*root){
    if(root==NULL)return;
    printf("%d-",root->data);
    preorder(root->left);
    preorder(root->right);
}
void postorder(struct node*root){
    if(root==NULL)return;
    postorder(root->left);
    postorder(root->right);
    printf("%d-",root->data);
}
struct node*createNode(int valve){
    struct node*newNode=malloc(sizeof(struct node));
    newNode->data=valve;
    newNode->left=NULL;
    newNode->right=NULL;
    return newNode;
}
void main(){
    struct node*root=createNode(1);
    root->left=createNode(12);
    root->right=createNode(9);
    root->left->left=createNode(10);
    root->left->right=createNode(15);
    printf("Inorder traversal\n");
    inorder(root);
    printf("\nPreorder traversal\n");
    preorder(root);
    printf("\nPostorder traversal\n");
    postorder(root);
}


QUESTION-2
#include<stdio.h>
#include<stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};
struct node *newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->data = item; 
    temp->left = temp->right = NULL; 
    return temp; 
} 
struct node* insert(struct node *node, int value) 
{ 
if (node == NULL) return newNode(value); 
  if (value < node->data) 
        node->left  = insert(node->left, value); 
    else if (value > node->data) 
        node->right = insert(node->right, value);    
return node; 
}  
void inorder(struct node* root){
    if(root == NULL) return;
    inorder(root->left);
    printf("%d ->", root->data);
    inorder(root->right);
}
void main(){
    struct node *root = NULL; 
    root = insert(root, 50); 
    insert(root, 30); 
    insert(root, 20); 
    insert(root, 40); 
    insert(root, 70); 
    insert(root, 60); 
    insert(root, 80);
 printf("\ninorder traversal \n");
    inorder(root);
}


QUESTION-3
#include <stdio.h>
int main(){
    int arr[100],k,i,count=0,n;
    printf("Enter the size of the array: ");
    scanf("%d",&n);
    printf("Array is: ");
    for(i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    printf("Enter the element to search in the array: ");
    scanf("%d",&k);
    for(i=0;i<n;i++){
        if(arr[i]==k){
            count=1;
            break;
    }}
    if(count=1){
        printf("%d is found at position %d",k,i+1);
    }else{
        printf("Element is not found");
    }
    return 0;
}

QUESTION-4
#include<stdio.h>
int main(){
    int i,j,low,high,middle,n,value,swap,arr[n];
    printf("enter number of elements:");
    scanf("%d",&n);
    printf("enter the elements:\n");
    for(i= 0; i <n; i++){
                scanf("%d",&arr[i]);
    }
    printf("enter the value to be searched:");
    scanf("%d",&value);
    low = 0;
    high = n - 1;
     for(i=0;i<n-1;i++){
        for(j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                swap=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=swap;
            }
        }
     }while(low<=high){
        middle=(low+high)/2;
        if(arr[middle]<value){
            low=middle+1;
        }else if(arr[middle]==value){
            printf("%d is found at location %d",value,middle+1);
            break;
        }else{
            high=middle-1;
        }
    }if(low>high){
        printf("Not found");
    }
    return 0;
}